추상클래스 : 클래스에 대한 템플릿의 역할 ( 변수, 메소드의 구성 등을 상속해줘, 상속받은 클래스를 고정된 틀에 맞춰 생성하도록 안내 )
	> 추상메소드를 갖고 있으면, 추상클래스 예약어 abstract 를 입력해주어야 한다.
	
	추상클래스의 생성 : public abstract class ClassName { }
	
	추상(템플릿) 메소드 : public abstract void drive();
	
	§ 추상클래스를 상속받은 클래스는 추상메소드를 반드시 오버라이딩 해주어야 한다.
			@Override									┐
			public void drive() {						│
				System.out.println("스포츠카를 운전합니다.");	│
			}											┘ ==> 추상클래스를 상속받은 경우, 반드시 오버라이딩을 해야한다.
			
			@Override									┐
			public void stop() {	}					┘ ==> 내용은 없더라도, 오버라이딩 하여 블록문을 반드시 넣어야 한다.
			
	§ 일반클래스와 같이 사용할 수 있다.
		> 일반 클래스 : 공통적으로 사용하는 함수
		> 추상 클래스 : 클래스에 따라서 달라지는 함수
		
			public abstract void drive();				┐
			public abstract void stop();				┘ ==> 클래스에 따라서 달라지는 함수
			
			public void startCar() {					┐
				System.out.println("시동을 켭니다");		│
			}											│
			public void turnOff() {						│
				System.out.println("시동을 끕니다.");		│
			}											┘ ==> 상속받는 클래스들이 공통적으로 사용하는 함수
			
	§ 추상클래스는 객체 생성이 불가능하다.
			AbstractClass Instance = new AbstractClass(); => Cannot instantiate the type AbstractClass (인스턴스 생성불가)
				> 직접적인 객체 생성이 불가능하다.
			AbstractClass Instance = new SubClass(); > 다형성을 통해 객체를 생성해야한다.